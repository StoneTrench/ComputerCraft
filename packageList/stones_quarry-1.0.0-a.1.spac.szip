{"files":[{"content":"{\n    \"name\": \"stones_quarry\",\n    \"displayName\": \"Stones' Quarry\",\n    \"version\": \"1.0.0-a.1\",\n    \"description\": \"A quarry program for turtles.\",\n    \"authors\": [\n        \"StoneTrench\"\n    ],\n    \"dependencies\": [\n        \"asr\"\n    ],\n    \"commands\": [\n        \"qury.lua\"\n    ]\n}","path":"/quarry/package.json"},{"content":"local function QUARRY_FUNC()\n    if not turtle then\n        error(\"Quarry can only be used on a turtle!\")\n    end\n\n    require(F.PATHS.DIR.packages .. \"asr.asr\")\n\n    local parentProgram = \"stones-quarry\";\n\n    local transform = ASR.loadAll(parentProgram);\n    transform = transform or ASR.createObject(parentProgram, { x = 0, y = 0, z = 0, direction = \"north\", }, \"transform\")\n\n    local function GetLength(x, y, z)\n        return math.sqrt(x * x + y * y + z * z)\n    end\n    local function GetEnumFromVector(x, y, z)\n        local max = math.max(math.abs(x), math.abs(y), math.abs(z))\n\n        --[[\n        +x east\n        -x west\n        +z south\n        -z north\n    ]]\n        if max == math.abs(x) then\n            if x > 0 then\n                return \"east\", 1, 0, 0\n            else\n                return \"west\", -1, 0, 0\n            end\n        end\n\n        if max == math.abs(y) then\n            if y > 0 then\n                return \"up\", 0, 1, 0\n            else\n                return \"down\", 0, -1, 0\n            end\n        end\n\n        if max == math.abs(z) then\n            if z > 0 then\n                return \"south\", 0, 0, 1\n            else\n                return \"north\", 0, 0, -1\n            end\n        end\n\n        return;\n    end\n\n    local YawIndexToEnum = {\n        [0] = \"north\",\n        [1] = \"east\",\n        [2] = \"south\",\n        [3] = \"west\",\n        [4] = \"up\",\n        [5] = \"down\",\n    }\n    local EnumToYawIndex = {\n        [\"north\"] = 0,\n        [\"east\"] = 1,\n        [\"south\"] = 2,\n        [\"west\"] = 3,\n        [\"up\"] = 4,\n        [\"down\"] = 5\n    }\n\n    return {\n        --[[\n            -Relative x, y and z to the position the quarry was first activated\n        ]]\n        moveTo = function(x, y, z, canBreak)\n            local diffX, diffY, diffZ = x - transform.x(), y - transform.y(), z - transform.z();\n\n            local prevDist = 1;\n            local currDist = 0;\n\n            while not (diffX == 0 and diffY == 0 and diffZ == 0) and prevDist >= currDist do\n                prevDist = currDist\n\n                diffX, diffY, diffZ = x - transform.x(), y - transform.y(), z - transform.z();\n                QUARRY.move(GetEnumFromVector(diffX, diffY, diffZ), canBreak)\n                currDist = GetLength(diffX, diffY, diffZ)\n\n                if QUARRY.handleFuel() then\n                    error(\"No fuel!\")\n                end\n            end\n        end,\n        move = function(direction, x, y, z, canBreak)\n            if direction == \"up\" then\n                if turtle.detectUp() and canBreak then\n                    if not turtle.digUp() then\n                        return false;\n                    end\n                end\n\n                if turtle.up() then\n                    transform.x(transform.x() + x)\n                    transform.y(transform.y() + y)\n                    transform.z(transform.z() + z)\n                end\n            elseif direction == \"down\" then\n                if turtle.detectDown() and canBreak then\n                    if turtle.digDown() then\n                        return false;\n                    end\n                end\n\n                if turtle.down() then\n                    transform.x(transform.x() + x)\n                    transform.y(transform.y() + y)\n                    transform.z(transform.z() + z)\n                end\n            else\n                QUARRY.faceTowards(direction)\n\n                if turtle.detect() and canBreak then\n                    if turtle.dig() then\n                        return false;\n                    end\n                end\n\n                if turtle.forward() then\n                    transform.x(transform.x() + x)\n                    transform.y(transform.y() + y)\n                    transform.z(transform.z() + z)\n                end\n            end\n        end,\n        faceTowards = function(direction)\n            local current = transform.direction();\n            transform.direction(direction);\n\n            local dist = math.abs(EnumToYawIndex[current] - EnumToYawIndex[direction]);\n\n            for i = 1, dist, 1 do\n                turtle.turnRight()\n            end\n        end,\n        handleFuel = function()\n            if turtle.getFuelLimit() == math.huge then\n                return false;\n            end\n\n            if turtle.getFuelLevel() == 0 then\n                local fuelIndex = findItemIndex(function(e)\n                    if e == nil then return false end\n\n                    console.log(e)\n\n                    return false\n                end)\n\n                if fuelIndex == -1 then\n                    return true;\n                end\n                turtle.refuel()\n            end\n\n            return false;\n        end,\n        findItemIndex = function(predicate)\n            for i = 1, 16, 1 do\n                if predicate(turtle.getItemDetail(i), i) then\n                    return i;\n                end\n            end\n\n            return -1;\n        end\n    }\nend\n\nQUARRY = QUARRY_FUNC();\n","path":"/quarry/quarry.lua"},{"content":"require(F.PATHS.DIR.packages .. \"quarry/quarry\")\n\nQUARRY.moveTo(1, 1, 0, false)","path":"/quarry/qury.lua"}]}