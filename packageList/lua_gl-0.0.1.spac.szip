{"files":[{"content":"local function luaGL_FUNC()\n    require(F.PATHS.DIR.packages .. \"amath.amath\")\n\n    return {\n        createRenderer = function(wind)\n            local mainBuffer = luaGL.createRenderBuffer(wind.getSize())\n\n            local e = {}\n\n            e = {\n\n            }\n\n            local map = {\n                \"ABCD\",\n                \"EFGH\",\n                \"IJKL\",\n                \"MNOP\"\n            }\n\n            mainBuffer.drawTriangle({ 8, 8 }, { 1, 1 }, { 1, 8 }, function(u, v)\n                local _u, _v = math.floor(u * 4) + 1, math.floor(v * 4) + 1\n\n                return map[_u]:sub(_v, _v), \"black\", \"white\"\n            end)\n            mainBuffer.drawBuffer(wind, 8, 8)\n\n            read()\n\n            return e\n        end,\n        createRenderBuffer = function(width, height)\n            local buffer = {}\n\n            for x = 1, width, 1 do\n                buffer[x] = {}\n                for y = 1, height, 1 do\n                    buffer[x][y] = { \" \", \"black\", \"white\" }\n                end\n            end\n\n            local function SetPixel(x, y, char, bkg, fgr)\n                buffer[x][y] = { char, bkg, fgr };\n            end\n\n            return {\n                drawTriangle = function(p1, p2, p3, uvFunc)\n                    local v2_a = {\n                        math.min(p1[1], p3[1]),\n                        math.min(p1[2], p3[2])\n                    }\n                    local v2_c = {\n                        math.max(p1[1], p3[1]),\n                        math.max(p1[2], p3[2])\n                    }\n                    local v2_b = p2\n\n\n                    -- calculate vectors for two sides of the triangle\n                    local v1 = AMATH.VecXU.Sub(v2_b, v2_a)\n                    local v2 = AMATH.VecXU.Sub(v2_c, v2_a)\n\n                    -- calculate the normal vector of the triangle\n                    local normal = { -v1[2], v1[1] }\n\n                    if AMATH.VecXU.Length(normal) == 0 then\n                        error(\"Triangle is degenerate.\")\n                    end\n\n                    -- calculate the dot products of the normal vector with the two vectors\n                    local dot1 = AMATH.VecXU.Dot(normal, v1)\n                    local dot2 = AMATH.VecXU.Dot(normal, v2)\n\n                    -- calculate the barycentric coordinates of each pixel within the triangle\n                    for x = math.ceil(math.min(v2_a[1], v2_b[1], v2_c[1])), math.floor(math.max(v2_a[1], v2_b[1], v2_c[1])) do\n                        for y = math.ceil(math.min(v2_a[2], v2_b[2], v2_c[2])), math.floor(math.max(v2_a[2], v2_b[2], v2_c[2])) do\n                            local barycentric = { x - v2_a[1], y - v2_a[2] }\n                            local u = AMATH.VecXU.Dot(barycentric, v2) / dot1\n                            local v = AMATH.VecXU.Dot(barycentric, v1) / dot2\n\n                            if dot1 == 0 then\n                                u = 0;\n                            end\n                            if dot2 == 0 then\n                                v = 0;\n                            end\n\n                            -- check if the pixel is inside the triangle\n                            if u >= 0 and v >= 0 and u + v <= 1 then\n                                -- call the function with the UV coordinates and set the pixel to the result\n                                SetPixel(x, y, uvFunc(u, v))\n                            end\n                        end\n                    end\n                end,\n                drawBuffer = function(wind, dx, dy)\n                    if dx == nil then dx = 0 end\n                    if dy == nil then dy = 0 end\n\n                    util.fs.writeFile(\"debug.txt\", textutils.serialize(buffer))\n\n                    for x = 1, width, 1 do\n                        for y = 1, height, 1 do\n                            local char, bkg, fgr = table.unpack(buffer[x][y])\n                            wind.setBackgroundColor(colors[bkg])\n                            wind.setTextColor(colors[fgr])\n                            wind.setCursorPos(x + dx, y + dy)\n                            wind.write(char)\n                        end\n                    end\n                end\n            }\n        end\n    }\nend\n\nluaGL = luaGL_FUNC()\n","path":"/lua-gl/lua-gl.lua"},{"content":"{\n    \"name\": \"lua_gl\",\n    \"displayName\": \"LuaGL\",\n    \"description\": \"A cc graphics library.\",\n    \"version\": \"0.0.1\",\n    \"dependencies\": [\n        \"amath\"\n    ],\n    \"authors\": [\n        \"StoneTrench\"\n    ],\n    \"tags\": [\n        \"lib\",\n        \"library\"\n    ]\n}","path":"/lua-gl/package.json"}]}