{"files":[{"content":"local function ASR_FUNC()\n    local prefix = \"asr_\";\n\n    local function Set(parentProgram, objName, key, value)\n        F.programData.set(prefix .. parentProgram, objName, key, value)\n    end\n    local function Get(parentProgram, objName, key)\n        return F.programData.getOrCreate(prefix .. parentProgram, objName, key, nil)\n    end\n\n    return {\n        createObject = function(parentProgram, srcObj, name)\n            local e = {}\n\n            local clone = srcObj;\n            clone.asrName = name;\n\n            for key, value in pairs(clone) do\n                e[key] = function(val)\n                    if val == nil then\n                        return Get(parentProgram, name, key)\n                    end\n                    Set(parentProgram, name, key, val)\n                    return val;\n                end\n                e[key](value);\n            end\n\n            return e;\n        end,\n        loadAll = function(parentProgram)\n            local groups = F.programData.getGroups(prefix .. parentProgram);\n\n            local objects = {};\n\n            console.log(#groups)\n            for key, value in pairs(groups) do\n                local srcObj = F.programData.getFullObject(prefix .. parentProgram, value);\n                if srcObj then\n                    table.insert(objects, ASR.createObject(parentProgram, srcObj, srcObj.asrName));\n                end\n            end\n\n            return table.unpack(objects);\n        end\n    }\nend\n\nASR = ASR_FUNC();\n","path":"/asr/asr.lua"},{"content":"{\n    \"name\": \"asr\",\n    \"displayName\": \"Automatic State Reload\",\n    \"description\": \"A library to save the current state of a machine and reload it when it restarts.\",\n    \"version\": \"1.0.0\",\n    \"authors\": [\n        \"StoneTrench\"\n    ],\n    \"tags\": [\n        \"lib\",\n        \"library\"\n    ]\n}","path":"/asr/package.json"}]}